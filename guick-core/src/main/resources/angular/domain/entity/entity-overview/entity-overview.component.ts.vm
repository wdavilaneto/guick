import { Component, OnInit } from '@angular/core';
import { MatDialog } from '@angular/material';
import { Location } from '@angular/common';
import { ActivatedRoute, Router } from '@angular/router';
import { FormGroup, Validators, FormBuilder } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { ${entity.name} } from '@core/services/domain/${entity.dashedName}';
import { ${entity.name}Service } from '../${entity.dashedName}.service';

@Component({
  selector: 'app-${entity.dashedName}-overview',
  templateUrl: './${entity.dashedName}-overview.component.html',
})
export class ${entity.name}OverviewComponent implements OnInit {
  reactiveForm: FormGroup;
  public id: number;
  public tabSelected = '${entity.name}';
  ${entity.beanName}: ${entity.name} = new ${entity.name}();

  constructor(
    private service: ${entity.name}Service,
    private route: ActivatedRoute,
    private router: Router,
    private location: Location,
    private dialog: MatDialog,
    private fb: FormBuilder) {
    this.route.params.subscribe(params => {
      if (params['id']) {
        this.id = params['id'];
        this.initTemplate(this.id);
      }
    });

  }

  ngOnInit() {
  }

  initTemplate(id: number) {
    console.log(id);
    this.get(id);
  }

  get(id: any): void {
    this.service.get(id).subscribe(result => {
      this.${entity.beanName} = result;
      this.createFormGroup();
    });
  }

  backClicked() {
    this.location.back();
  }
  createFormGroup() {
    this.reactiveForm = this.fb.group({
#set( $idAgragation = '' )
#foreach( ${property} in ${entity.properties})
      ${idAgragation}${property}: [this.${entity.beanName}.${idAgragation}${property}, [#if(!${property.column.nullable})Validators.required#{end} ]],
#end
#foreach( ${property} in ${entity.parent.getProperties()})
    ${idAgragation}${property}: [this.${entity.beanName}.${idAgragation}${property}, [#if(!${property.column.nullable})Validators.required#{end} ]],
#end
#set( $idAgragation = 'id.' )
#foreach( ${property} in ${entity.id.getProperties()})
    ${idAgragation}${property}: [this.${entity.beanName}.${idAgragation}${property}, [#if(!${property.column.nullable})Validators.required#{end} ]],
#end
#set( $idAgragation = '' )
#set ($stringField = "id")
#foreach( ${complexProperty} in ${entity.getManyToOneProperties()})
//    ${idAgragation}${property}: [this.${entity.beanName}.${idAgragation}${property}, [#if(!${property.column.nullable})Validators.required#{end} ]],
#end
#foreach( ${complexProperty} in ${entity.parent.getManyToOneProperties()})
//    ${idAgragation}${property}: [this.${entity.beanName}.${idAgragation}${property}, [#if(!${property.column.nullable})Validators.required#{end} ]],
#end
    });
  }
}
