def packageBase = project.packageBase

def entities = database.generateModel()
project.metadata.entities = entities

//def entityList = entities.findAll { e -> !e.isEmbeddable() }
def entityList = project.getEntitiesWithoutHibernateIssue().findAll { e -> !e.isEmbeddable() }
def embeddedList = entities.findAll { entity -> entity.isEmbeddable() }
def enumList = []
entities.each { entity -> enumList.addAll(entity.enums) }

def lang = project.config.generationLanguage
def useWorkflow = (project.config != null && project.config.useWorkflow);

guick {
    domain {

        "single-generateds" {
            templates = [
//                    [input: "angular/src/app/modules/main/main.html.vm", output: "/src/app/modules/main/main.html"]
            ]
        }

        for (def entity : entityList) {
            "geracao de front-end" {
                templates = [
                        [input: "angular/entities/entity.component.css.vm", output: "/app/entities/${entity.beanName}/${entity.beanName}.component.css"],
                        [input: "angular/entities/entity.component.html.vm", output: "/app/entities/${entity.beanName}/${entity.beanName}.component.html"],
                        [input: "angular/entities/entity.component.ts.vm", output: "/app/entities/${entity.beanName}/${entity.beanName}.component.ts"],
                        [input: "angular/entities/entity.service.ts.vm", output: "/app/entities/${entity.beanName}/${entity.beanName}.service.ts"],
                ]
                object entity
            }
        }

        // for (def property : entity.getManyToOneProperties())
        for (def entity : entityList) {
            "geracao de front-end" {
                templates = [
//                        [input: "stage/frontend/crud/modules/entity/detail/tomany.controller.js.vm",
//                         output: "/front-end/app/modules/${entity.beanName}/details/${entity.beanName}.child.controller.js"],
//                        [input: "stage/frontend/crud/modules/entity/detail/tomany.child.html.vm",
//                         output: "/front-end/app/modules/${entity.beanName}/details/${entity.beanName}.child.html"],
//                        [input: "stage/frontend/crud/modules/entity/detail/tomany.compound.html.vm",
//                         output: "/front-end/app/modules/${entity.beanName}/details/${entity.beanName}.compound.html"]
                ]
                object entity
            }

        }

//        for (def entity : entityList) {
//            "tests" {
//                object entity
//                templates = [
//                        [input: "stage/crud/test/SerializationTest.vm", output: "/api/src/test/${lang}/${packageBase}/domain/SerializationTest.${lang}"],
//
//                        [input: "stage/crud/test/integrationTest.vm", output: "/api/src/test/${lang}/${packageBase}/api/service/${entity.name}IntegrationTest.${lang}"],
//                        [input: "stage/crud/test/dml-entity.sql.vm", output: "/api/src/test/resources/${packageBase}/api/service/dml-${entity.name}.sql.vm"],
//
//                        [input: "stage/crud/test/AcceptanceSuiteTest.vm", output: "/api/src/test/${lang}/specs/${entity.name.toLowerCase()}/${entity.name}AcceptanceSuiteTest.${lang}"],
//                        [input: "stage/crud/test/AcceptanceSuite.html.vm", output: "/api/src/test/resources/specs/${entity.name.toLowerCase()}/${entity.name}AcceptanceSuite.html"],
//
//                        [input: "stage/crud/test/CreateWithRequiredAcceptanceCriteria.vm", output: "/api/src/test/${lang}/specs/${entity.name.toLowerCase()}/Create${entity.name}WithRequiredAcceptanceCriteria.${lang}"],
//                        [input: "stage/crud/test/UpdateWithRequiredAcceptanceCriteria.vm", output: "/api/src/test/${lang}/specs/${entity.name.toLowerCase()}/Update${entity.name}WithRequiredAcceptanceCriteria.${lang}"],
//                        [input: "stage/crud/test/DeleteWithRequiredAcceptanceCriteria.vm", output: "/api/src/test/${lang}/specs/${entity.name.toLowerCase()}/Delete${entity.name}WithRequiredAcceptanceCriteria.${lang}"],
//                        [input: "stage/crud/test/FindOneAcceptanceCriteria.vm", output: "/api/src/test/${lang}/specs/${entity.name.toLowerCase()}/FindOne${entity.name}AcceptanceCriteria.${lang}"],
//                        [input: "stage/crud/test/FindAllAcceptanceCriteria.vm", output: "/api/src/test/${lang}/specs/${entity.name.toLowerCase()}/FindAll${entity.name}AcceptanceCriteria.${lang}"],
//
//                        [input: "stage/crud/test/CreateWithRequiredAcceptanceCriteria.html.vm", output: "/api/src/test/resources/specs/${entity.name.toLowerCase()}/Create${entity.name}WithRequiredAcceptanceCriteria.html"],
//                        [input: "stage/crud/test/UpdateWithRequiredAcceptanceCriteria.html.vm", output: "/api/src/test/resources/specs/${entity.name.toLowerCase()}/Update${entity.name}WithRequiredAcceptanceCriteria.html"],
//                        [input: "stage/crud/test/DeleteWithRequiredAcceptanceCriteria.html.vm", output: "/api/src/test/resources/specs/${entity.name.toLowerCase()}/Delete${entity.name}WithRequiredAcceptanceCriteria.html"],
//                        [input: "stage/crud/test/FindOneAcceptanceCriteria.html.vm", output: "/api/src/test/resources/specs/${entity.name.toLowerCase()}/FindOne${entity.name}AcceptanceCriteria.html"],
//                        [input: "stage/crud/test/FindAllAcceptanceCriteria.html.vm", output: "/api/src/test/resources/specs/${entity.name.toLowerCase()}/FindAll${entity.name}AcceptanceCriteria.html"]
//                ]
//            }
//        }
    }
}
