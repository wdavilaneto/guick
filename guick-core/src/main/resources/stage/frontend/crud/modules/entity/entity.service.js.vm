#set( $js  = "$")
#set( $entityBeanName = ${util.uncapitalize($entity.name)} )
#set( $projectBeanName = ${util.uncapitalize($project.name)} )
(function() {
	'use strict';

/**
 * @ngdoc service
 * @name ${projectBeanName}App.${projectBeanName}Service
 * @description
 * # myService
 * Factory in the ${projectBeanName}App.
 */
angular.module('${projectBeanName}App').factory('${entityBeanName}Service', ${entityBeanName}Service);

    ${entityBeanName}Service.$inject = ['$resource', 'gridService', 'ENV_CONFIG'];

    function ${entityBeanName}Service($resource, gridService, ENV_CONFIG) {
        var service = $resource('/api/${entityBeanName}/:id', {}, {
            'findAll': { method: 'GET', url: '/api/${entityBeanName}', isArray: false},
            'search': { method: 'POST', url: '/api/${entityBeanName}/search', isArray: false},
            'searchText': { method: 'POST', url: '/api/${entityBeanName}/searchText', isArray: false},
            'findAllOverdue':{ method: 'GET', url: '/api/${entityBeanName}/overdue', isArray: false},
            'get': { method: 'GET'},
            'save': { method: 'POST'},
            'remove': { method: 'DELETE'}
        });

        var entity = {};

        service.getCurrentEntity = function (){
            return entity;
        };

        service.setCurrentEntity = function (obj){
            entity = obj;
        };

        service.create = function (){
            var e = {
#set($size = ${entity.getManyToOneProperties().size()} )
#set($counter = 0)
#foreach( ${ent} in ${entity.getManyToOneProperties()})
#set($counter = $counter + 1)
                //${util.uncapitalize($ent.name)}:{}#if($counter < $size),
#end
#end

            };
            return e;
        };

        service.factorySearchSelect = function (){
            // Factory SearchSelect Object for all "search text properties"
            var searchSelects = {
#set($idToOneSize = ${entity.id.getManyToOneProperties().size()} )
#if(!${idToOneSize}) #set( $idToOneSize=0) #end
#set($searchedEntitys = [])
#foreach( ${complexProperty} in ${entity.getManyToOneProperties()} )
#set( $foo = ${searchedEntitys.add( $complexProperty )} )
#end
#foreach( ${complexProperty} in ${entity.parent.getManyToOneProperties()} )
#set( $foo = ${searchedEntitys.add( $complexProperty )} )
#end
#set($size = ${searchedEntitys.size()} )
#set($counter = 0)
#foreach( ${complexProperty} in ${searchedEntitys} )
#set($counter = $counter + 1)
                ${complexProperty.name}:{}#if($counter < $size || (${idToOneSize} > 0 )),
#end
#end
#if($idToOneSize && $idToOneSize > 0)
                id:{
#end
#set($counter = 0)
#foreach( ${complexProperty} in ${entity.id.getManyToOneProperties()} )
#set($counter = $counter + 1)
                    ${complexProperty.name}:{}#if($counter < $idToOneSize ),
#end
#end
#if($idToOneSize && $idToOneSize > 0)

                }
#end

            };
            // utility method to copy selected object to entity ( reference
            searchSelects.toEntity = function (ref) {
                console.log(ref);
#foreach( ${complexProperty} in ${searchedEntitys} )
#if(${complexProperty.referedEntity.table.count} > 200 || ${complexProperty.referedEntity.looksLikeMainEntity()})
                if (ref && searchSelects.${complexProperty.name}.originalObject) {
                    ref.${complexProperty.name} = searchSelects.${complexProperty.name}.originalObject;
                } else {
                    ref.${complexProperty.name} = null;
                }
#else
##                if (ref && ref.${complexProperty.name} && searchSelects.${complexProperty.name}) {
##                    ref.${complexProperty.name}.id = searchSelects.${complexProperty.name}.id;
##                } else {
##                    ref.${complexProperty.name} = null;
##                }
#end
#end
#######################
#foreach( ${complexProperty} in ${entity.id.getManyToOneProperties()} )
#if(${complexProperty.referedEntity.table.count} > 200 || ${complexProperty.referedEntity.looksLikeMainEntity()})
                if (ref && ref.id && searchSelects.id.${complexProperty.name}.originalObject) {
                    ref.id.${complexProperty.name} = searchSelects.id.${complexProperty.name}.originalObject;
                } else {
                    ref.id = { ${complexProperty.name}:null};
                }
#else
##                if (ref && ref.id && ref.${complexProperty.name} && searchSelects.${complexProperty.name}) {
##                    ref.id.${complexProperty.name}.id = searchSelects.${complexProperty.name}.id;
##                } else {
##                    ref.id.${complexProperty.name} = null;
##                }
#end
#end

            };
            searchSelects.fromEntity = function (ref) {
                console.log(ref);
#foreach( ${complexProperty} in ${searchedEntitys} )
#if(${complexProperty.referedEntity.table.count} > 200 || ${complexProperty.referedEntity.looksLikeMainEntity()})
                if (ref && ref.${complexProperty.name} ) {
                    searchSelects.${complexProperty.name}.originalObject = ref.${complexProperty.name};
                }
#else
##                if (ref && ref.${complexProperty.name} ) {
##                    searchSelects.${complexProperty.name} = ref.${complexProperty.name};
##                }
#end
#end
            };
            searchSelects.clear = function() {
#foreach( ${complexProperty} in ${searchedEntitys} )
                searchSelects.${complexProperty.name} = {};
#end
            };
            return searchSelects;
        };

        service.createGridOptions = function (entitySelected, isEditMode){
            var options = gridService.createGridOptions(isEditMode);
            //options.rowTemplate= '<div ng-dblclick="detalhar(row.entity)" ng-style="{ \'cursor\': row.cursor }" ng-repeat="col in renderedColumns" ng-class="col.colIndex()" class="ngCell {{col.cellClass}}"><div class="ngVerticalBar" ng-style="{height: rowHeight}" ng-class="{ ngVerticalBarVisible: !$last }">&nbsp;</div><div ng-cell></div></div>';
            //options.rowTemplate= '<div ng-dblclick="edit${util.uncapitalize($entity.name)}(row.entity)" ng-style="{ \'cursor\': row.cursor }" ng-repeat="col in renderedColumns" ng-class="col.colIndex()" class="ngCell {{col.cellClass}}"><div class="ngVerticalBar" ng-style="{height: rowHeight}" ng-class="{ ngVerticalBarVisible: !$last }">&nbsp;</div><div ng-cell></div></div>';
            options.columnDefs = [];

#set($properties = ${entity.getDistinctedProperties()} )
######################
#if( ${entity.table.getFieldThatPointsParentPk()} && ${entity.table.getFieldThatPointsParentPk().size()} >=1)
#foreach( ${property} in ${entity.properties})
#if( ${entity.table.getFieldThatPointsParentPk()[0]} == ${property.column})
#set( $foo = ${properties.remove( $property )} )
#end
#end
#end
######################
#if(${entity.id.type} != 'Long' && !(${entity.table.pk.size()} == 1 && ${entity.table.pk[0].useUUID}) && !(${entity.table.getFieldThatPointsParentPk().size()} == 1))
            options.columnDefs.push({field: 'id', displayName: 'id', sortable: false});
#end
######################
#set($size = ${properties.size()} )
#set($counter = 0)
#foreach( ${property} in ${properties})
## Caso seja uma Long ( pode ser foreing key ) e eh uma constriaint, portanto para uma entidade nao mapeada ( oculta-se a chave )
#if( (${property.type} == 'Long' && ${property.column.constraint}) || ${property.type} == 'byte[]')
            //options.columnDefs.push({field: '${property}', displayName: '${property.title}', sortable: false#if (${property.name.length()} < 6 && ${property.column.length} < 6), width: 30#{end}} );
#else
#set($counter = $counter + 1)
##                // (($counter > 6) || ( (${size} > 6) && (${property.column.length} < 30 || ${property.column.length} > 500) ) )
            #if(($counter > 7) || ( (${size} > 7) && (${property.column.length} < 10 || ${property.column.length} > 1000) ) )//#{end}options.columnDefs.push({field: '${property}', displayName: '${property.title}', sortable: false#if (${property.name.length()} < 6 && ${property.column.length} < 6), width: 30#{end}});
#end
#end
#####################
#set($counter = 0)
#foreach( ${property} in ${entity.getDistinctedAllComplexProperties()})
#if(${property.isManyToOne()})
#set($counter = $counter + 1)
            #if($counter > 2)//#{end}options.columnDefs.push({field: '${property.name}.${property.referedEntity.getMostDescritiveProperties()[0]}', displayName: '${property.title}', sortable: false#if (${property.referedEntity.getMostDescritiveProperties()[0].name.length()} < 5 && ${property.referedEntity.getMostDescritiveProperties()[0].column.length} < 5), width: 30#{end}});
#end
#end
            options.columnDefs.push({name:'btn_detail', displayName: '', enableColumnResizing: false, enableSorting: false, enableFiltering: false, cellTemplate: ENV_CONFIG.baseURL + 'modules/${entity.beanName}/components/${entity.beanName}.grid.cell.detalhar.html', width : '35', resizable: false});
            if (isEditMode) {
#if(${entity.looksLikeEnum()})
                options.columnDefs.push({name:'btn_edit', displayName: '', enableColumnResizing: false, enableSorting: false, enableFiltering: false, cellTemplate: ENV_CONFIG.baseURL + 'modules/${entity.beanName}/components/${entity.beanName}.grid.cell.edit.html', width : '35', resizable: false});
#end
                options.columnDefs.push({name:'btn_delete', displayName: '', enableColumnResizing: false, enableSorting: false, enableFiltering: false,  cellTemplate: ENV_CONFIG.baseURL + 'modules/${entity.beanName}/components/${entity.beanName}.grid.cell.delete.html' , width : '35', resizable: false});
            }
            return options;
        };
        return service;
    }

})();
