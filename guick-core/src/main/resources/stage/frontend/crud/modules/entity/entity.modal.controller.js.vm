#set( $js  = "$")
#set( $entityBeanName = ${util.uncapitalize($entity.name)} )
#set( $projectBeanName = ${util.uncapitalize($project.name)} )
/**
 *  Guick Generate class: https://github.com/wdavilaneto/guick
 *  Author: service-wdavilaneto@redhat.com
 *  This source is free under The Apache Software License, Version 2.0
 *  license url http://www.apache.org/licenses/LICENSE-2.0.txt
 *
 * @ngdoc function
 * @name ${projectBeanName}App.controller:${entityBeanName}Controller
 * @description
 * # ${entityBeanName}Controller
 * Modal Controller for ${entity.name} of the ${projectBeanName}App
 */
(function() {

	'use strict';

    angular.module('${projectBeanName}App')
        .controller('Modal${entity.name}Controller', Modal${entity.name}Controller);

    Modal${entity.name}Controller.$inject = ['${js}state', '${js}location', '${js}modalInstance', 'jsog', '${entityBeanName}Service', #foreach( ${ent} in ${entity.getDistinctedAllComplexProperties()})#set( $beanName = ${util.uncapitalize($ent.referedEntity.name)} )#if(${beanName} != ${entityBeanName})'${beanName}Service', #{end}#{end}'data'];

    function Modal${entity.name}Controller(${js}state, ${js}location, ${js}modalInstance, jsog, ${entityBeanName}Service #foreach( ${ent} in ${entity.getDistinctedAllComplexProperties()})#set( $beanName = ${util.uncapitalize($ent.referedEntity.name)} )#if(${beanName} != ${entityBeanName}), ${beanName}Service#{end}#{end} , data, readonly) {

        var vm = this;
        vm.entity = data;  //.${entity.beanName};
        vm.searchSelects = ${entityBeanName}Service.factorySearchSelect();
        vm.searchSelects.fromEntity(vm.entity);

        if (!readonly) {
            // Selects to Fullfill select boxes
            // Begin block
            #foreach( ${ent} in ${entity.getDistinctedAllComplexProperties()})
                #if( ${ent.isManyToOne()} && !${ent.referedEntity.looksLikeMainEntity()}) ## Caso nao seja muito grande e portanto caiba num select box ...
                    #set( $beanName = ${util.uncapitalize($ent.referedEntity.name)} )
                        ${beanName}Service.findAll({page: 1, size: vm.maxSelectBoxSize}, function (data) {
                            vm.${beanName}List = jsog.decode(data.content);
                    });
                #end
            #end
        }
        // end block

            vm.save = function () {
            console.log('Saving Modal');
                vm.searchSelects.toEntity(vm.entity);
                ${entityBeanName}Service.save(vm.entity, function (successResult) {
                console.log(successResult);
                    vm.entity = {};
                    ${js}modalInstance.close(vm.entity);
            });
        };

        vm.remove = function () {
            console.log('Deleting ${entityBeanName} with id:' + vm.entity.id);
                ${entityBeanName}Service.remove({id: vm.entity.id}, function (successResult) {
                console.log(successResult);
                    ${js}modalInstance.close(vm.entity);
                    ${js}state.go('${entity.beanName}Edit.main', {}, {reload: true});
            });
        };

            vm.cancel = function () {
                ${js}modalInstance.dismiss('cancel');
        };

    }

})();
