/**
 *  Guick Generate class: https://github.com/wdavilaneto/guick
 *  Author: service-wdavilaneto@redhat.com
 *  This source is free under The Apache Software License, Version 2.0
 *  license url http://www.apache.org/licenses/LICENSE-2.0.txt
 */
## #if(${entity.looksLikeMainEntitiy())
## package ${project.group}.${project.name}.entity;
## #end
## #if( ${entity.looksLikeDomain()} )
## package ${project.group}.${project.name}.domain;
## #end
## #if(${entity.looksLikeEnum()})
## package ${project.group}.${project.name}.enums;
## #end
package ${project.group}.${project.name}.domain;

#foreach( ${property} in ${entity.getEnums()})
import  ${project.group}.${project.name}.domain.${property.getName()};
#end
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.*;

import javax.validation.constraints.*;

import ${project.group}.commons.json.JsonDateDeserializer;
import ${project.group}.commons.json.JsonDateSerializer;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.voodoodyne.jackson.jsog.JSOGGenerator;
##import lombok.AllArgsConstructor;
##import lombok.Getter;
##import lombok.NoArgsConstructor;
##import lombok.Setter;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.hibernate.annotations.*;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import org.springframework.format.annotation.DateTimeFormat;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;


/**
 * ${entity.getName()}
 * A classe ${entity.getName()} representa o mapeamento Objeto-Relacional
 * da entidade de negocio armazenada na tabela ${entity.getTable().getName()}.
 *${entity.table.comment}
 */
##@Getter
##@Setter
##@NoArgsConstructor
##@AllArgsConstructor
@Entity
@Table(name = "${entity.getTable().getName()}")
##@Where(clause = "dataCadastro > to_date('2013','YYYY')")
#if( !$entity.getId().isEmbeddable() && !$entity.getParent() && ${entity.id.type} == 'Long' )
@SequenceGenerator(name = "${entity.getTable().getSequenceName()}", sequenceName = "${entity.getTable().getSequenceName()}")
#else
#if(${entity.table.pk.size()} == 1 && ${entity.table.pk[0].useUUID})
@GenericGenerator(name = "uuid", strategy = "uuid2")
#end
#{end}## Knowable GEnerator Sequence
#if( $entity.childrens.size() > 0 )
@Inheritance(strategy= InheritanceType.JOINED)
## TODO melhorar o if para filtrar filhos com img
#if(  ${entity.childrens[0].name} == 'FuncImg' )
@SecondaryTables([@SecondaryTable(name="RH_FUNC_IMG", pkJoinColumns=[@PrimaryKeyJoinColumn(name="CDMATRICULA", referencedColumnName="CDMATRICULA")])])
#else
//@SecondaryTables([@SecondaryTable(name="RH_FUNC_IMG", pkJoinColumns=[@PrimaryKeyJoinColumn(name="CDMATRICULA", referencedColumnName="CDMATRICULA")])])
#end
#end
#if( ${entity.getParent()} )
#if ( ${entity.table.getPk().size()} == 0 )
#if (${entity.table.getFieldThatPointsParentPk().size()} == 1 )
#set( $strangeKey = ${entity.table.getFieldThatPointsParentPk()[0]} )
@PrimaryKeyJoinColumn( name="${strangeKey.name}" )
#else
// TODO Implementar Multiple pseudo/strang Key
#end
#else
#if (${entity.parent.table.getPk().size()} ==1)
@PrimaryKeyJoinColumn(name="${entity.table.pk[0].name}")
#else
// TODO implementar Primary key join column para com chave composta
@PrimaryKeyJoinColumns([
        @PrimaryKeyJoinColumn(name="CUST_ID", referencedColumnName="ID"),
        @PrimaryKeyJoinColumn(name="CUST_TYPE",referencedColumnName="TYPE")
])
#end
#end
#end
#if(${entity.beanName} == 'orgao' || ${entity.beanName.startsWith('tipo')} || ${entity.beanName} == 'enderecos'  )
#end
#if( ${entity.looksLikeEnum()} || ${entity.looksLikeDomain()} || ( ${entity.beanName} == 'endereco' || ${entity.beanName} == 'orgao' ))
// @Immutable ?
@Cacheable
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
#end
@JsonIdentityInfo(generator=JSOGGenerator.class)
@JsonIgnoreProperties(ignoreUnknown = true)
public class ${entity.getName()}#if( ${entity.getParent()} ) extends ${entity.getParent().getName()}#{else} implements Serializable#{end} {

#if(!$entity.isEmbeddable() and !$entity.getParent() )
#if($entity.getId().isEmbeddable() )
    @EmbeddedId
#else
#set( $id = $entity.getId())
    @Id
#if(${entity.id.type} == 'Long')
    @GeneratedValue(strategy = GenerationType.AUTO, generator = "${entity.getTable().getSequenceName()}")
#else
#if(${entity.table.pk.size()} == 1 && ${entity.table.pk[0].useUUID})
    @GeneratedValue(generator = "uuid")
#end
#end
    @Column(name="$entity.id.column.name"#if(${entity.id.column.precision}), precision = ${entity.id.column.precision}#{end}#if(${entity.id.column.scale}), scale = ${entity.id.column.scale}#{end} )
#end
    ${entity.getId().getType()} id;

#end
#parse( "stage/domain/groovy/simpleProperties.vm" )
#foreach( ${property} in ${entity.getEnums()})
    @Enumerated(EnumType.STRING)
    @Column(name = "${property.getSimpleProperty().getColumn().getName()}"#if(!${property.getSimpleProperty().getColumn().getNullable()}), nullable = false#{end}#if(${property.getSimpleProperty().column.precision}), precision = ${property.getSimpleProperty().column.precision}#{end}#if(${property.getSimpleProperty().column.scale}), scale = ${property.getSimpleProperty().column.scale}#{end}#if(${property.getSimpleProperty().column.length}), length = ${property.getSimpleProperty().column.length}#{end}#if( !${property.getSimpleProperty().getColumn().isInsertable()}), insertable = false #{end}#if(!${property.getSimpleProperty().getColumn().isUpdatable()}), updatable = false #end)
    ${property.getName()} ${property.getSimpleProperty().getName()} = ${property.getName()}.${property.getCheckValues()[0]};

#end
#foreach( ${property} in ${entity.getOneToManyProperties()})
    @JsonIgnore
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "#if( ${property.referedEntity.id.containsPropertyName( $util.uncapitalize( ${property.mappedBy} ) )}  )id.#{end}$util.uncapitalize( ${property.mappedBy} )")
    List<$property.type> $property.getName();## = new ArrayList<$property.type>(0);

#end
#parse( "stage/domain/groovy/manyToOneProperties.vm" )
#parse( "stage/domain/groovy/manyToManyProperties.vm" )

#if(  ${entity.childrens.size()} > 0 && ${entity.childrens[0].name} == 'FuncImg' )
    @Column(name = "FOTO", table = "RH_FUNC_IMG", updatable = false, insertable = false)
    @Lob
    @Basic(fetch = FetchType.LAZY)
    byte[] foto;
#end

########################################################
####### Syntax Shuger for properties on Embeddable ID ##
########################################################
#foreach( ${property} in ${entity.id.getProperties()})
#if ( !${strangeKey}  || ${property.column} != ${strangeKey} )
    /**
     * Syntax shugar Getter para this.id.${property.getName()} (Delegating)
     * @return valor do campo
     */
    @Transient
    public ${property.getType()} get${property.capitalizedName}() {
#if( $property.type == 'Date' or $property.type == 'byte[]' )
        if (this.id.get${property.capitalizedName}() != null) {
            return ($property.type) this.id.get${property.capitalizedName}().clone();
        }
        return null;
#else
        return this.id.get${property.capitalizedName}();
#end
    }

    /**
     * syntax shugar Setter para this.id.${property.getName()}  (Delegating)
     * @param value valor para ${property.getName()}
     */
    @Transient
    public void set${property.capitalizedName}(${property.getType()} value) {
#if( $property.type == 'Date' or $property.type == 'byte[]' )
        if (value != null) {
            this.id.set${property.capitalizedName}(($property.type) value.clone());
        } else {
            this.id.set${property.capitalizedName}(null);
        }
#else
        this.id.set${property.capitalizedName}(value);
#end
    }

#end
#end
#foreach( ${property} in ${entity.id.getManyToOneProperties()})
    /**
     * Syntax shugar Getter para this.id.${property.getName()} (Delegating)
     * @return valor do campo
     */
    @Transient
    public ${property.type} get${property.capitalizedName}() {
        return this.id.get${property.capitalizedName}();
    }

    /**
     * syntax shugar Setter para this.id.${property.getName()}  (Delegating)
     * @param value valor para ${property.getName()}
     */
    @Transient
    public void set${property.capitalizedName}(${property.type} value) {
        this.id.set${property.capitalizedName}(value);
    }

#end
#foreach( ${property} in ${entity.id.getOneToManyProperties()})
    /**
     * Syntax shugar Getter para this.id.${property.getName()} (Delegating)
     * @return valor do campo
     */
    @Transient
    public List<$property.type> get${property.capitalizedName}() {
        return this.id.get${property.capitalizedName}();
    }

    /**
     * syntax shugar Setter para this.id.${property.getName()}  (Delegating)
     * @param value valor para $property.getName()
     */
    @Transient
    public void set${property.capitalizedName}(List<$property.type> value) {
        this.id.set${property.capitalizedName}(value);
    }

#end
#foreach( ${property} in ${entity.id.getManyToManyProperties()})
    /**
     * Syntax shugar Getter para this.id.${property.getName()} (Delegating)
     * @return valor do campo
     */
    @Transient
    public List<$property.type> get${property.capitalizedName}() {
        return this.id.get${property.capitalizedName}();
    }

    /**
     * syntax shugar Setter para this.id.${property.getName()}  (Delegating)
     * @param value valor para $property.getName()
     */
    @Transient
    public void set${property.capitalizedName}(List<$property.type> value) {
        this.id.set${property.capitalizedName}(value);
    }

#end
#foreach( ${property} in ${entity.id.getEnums()})
   /**
    * Syntax shugar Getter para this.id.${property.getName()} (Delegating)
    * @return valor do campo
    */
    @Transient
    public ${property.getName()} get$util.capitalize( $property.getSimpleProperty().getName() )() {
        return this.id.get${property.getSimpleProperty().capitalizedName}();
    }

   /**
    * Syntax shugar Setter para this.id.${property.getName()}  (Delegating)
    * @param value valor para $property.getName()
    */
    @Transient
    public void set$util.capitalize( $property.getSimpleProperty().getName() )(${property.getName()} value) {
        this.id.set${property.getSimpleProperty().capitalizedName}(value);
    }

#end

#if(  ${entity.childrens.size()} > 0 && ${entity.childrens[0].name} == 'FuncImg' )
    public byte[] getFoto() {
        return foto;
    }

    public void setFoto(byte[] foto) {
        this.foto = foto;
    }
#end

    /**
     * {@inheritDoc}
     */
    @Override
    public int hashCode() {
        return new HashCodeBuilder()
#if(!$entity.isEmbeddable() and !$entity.getParent() )
                .append(id)
#end
#foreach( ${property} in ${entity.parent.properties})
                .append(${property.name})
#end
#foreach( ${property} in ${entity.id.getProperties()})
##                .append(id.${property.name})
#end
#foreach( ${property} in ${entity.properties})
#if ( !${strangeKey}  || ${property.column} != ${strangeKey} )
                .append(${property.name})
#end
#end
#foreach( ${property} in ${entity.getManyToOneProperties()})
                .append(${property.name})
#end
#foreach( ${property} in ${entity.parent.getManyToOneProperties()})
                .append(get${property.capitalizedName}())
#end
#foreach( ${property} in ${entity.id.getManyToOneProperties()})
##                .append(id.get${property.capitalizedName}())
#end
               .toHashCode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean equals(Object obj) {
        if (obj == null) { return false; }
        if (obj == this) { return true; }
        if (obj.getClass() != getClass()) {
            return false;
        }

#if ( !${entity.properties.empty})
        ${entity.getName()} rhs = (${entity.getName()}) obj;

#if(!$entity.isEmbeddable() and !$entity.getParent() )
        // For performance reasons we first eliminate @id (primary key) difference
        if (id != null && (!id.equals(rhs.id)) ) {
            return false;
        }
#end
        // so lets check all properties
        return new EqualsBuilder()
#foreach( ${property} in ${entity.properties})
#if ( !${strangeKey}  || ${property.column} != ${strangeKey} )
                .append(${property.name}, rhs.${property.name})
#end
#end
#foreach( ${property} in ${entity.parent.properties})
                .append(${property.name}, rhs.${property.name})
#end
#foreach( ${property} in ${entity.id.properties})
#set( $name = $util.capitalize( ${property.name} ))
##                .append(id.get${name}(), rhs.id.get${name}())
#end
#foreach( ${property} in ${entity.getManyToOneProperties()})
                .append(${property.name}, rhs.${property.name})
#end
#foreach( ${property} in ${entity.parent.getManyToOneProperties()})
                .append(get${property.capitalizedName}(), rhs.get${property.capitalizedName}())
#end
#foreach( ${property} in ${entity.id.getManyToOneProperties()})
##                .append(id.get${property.capitalizedName}(), rhs.getId().get${property.capitalizedName}())
#end
                .isEquals();
#else
        return true;
#end

    }

}
