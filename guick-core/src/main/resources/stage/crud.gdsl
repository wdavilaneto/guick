def packageBase = project.packageBase

def entities = database.generateModel()
project.metadata.entities = entities

//def entityList = entities.findAll { e -> !e.isEmbeddable() }
def entityList = project.getEntitiesWithoutHibernateIssue().findAll { e -> !e.isEmbeddable() }
def embeddedList = entities.findAll { entity -> entity.isEmbeddable() }
def enumList = []
entities.each { entity -> enumList.addAll(entity.enums) }

def lang = project.config.generationLanguage
def useWorkflow = (project.config != null && project.config.useWorkflow);

guick {
    domain {
        // [input: "stage/domain/${lang}/entityFilter.vm", output: "/api/src/main/${lang}/${packageBase}/domain/${entity.name}Filter.${lang}"]
        for (def entity : entityList) {
            "domain layer" {
                object entity
                templates = [
                        [input: "stage/domain/${lang}/entity.vm", output: "/api/src/main/${lang}/${packageBase}/domain/${entity.name}.${lang}"]
                ]
            }
        }
        for (def entity : embeddedList) {
            "embeddables" {
                object entity
                templates = [[input: "stage/domain/${lang}/embeddable.vm", output: "/api/src/main/${lang}/${packageBase}/domain/${entity.name}.${lang}"]]
            }
        }
        for (def entity : enumList) {
            "enums" {
                object entity
                templates = [[input: "stage/domain/${lang}/enum.vm", output: "/api/src/main/${lang}/${packageBase}/domain/${entity.name}.${lang}"]]
            }
        }

        for (def entity : entityList) {
            "geracao de services" {
                object entity
                templates = [
                        [input: "stage/crud/api/persistence/repository.vm", output: "/api/src/main/${lang}/${packageBase}/api/persistence/${entity.name}Repository.${lang}"],
                        [input: "stage/crud/api/persistence/EntityRepository.vm", output: "/api/src/main/${lang}/${packageBase}/api/persistence/core/${entity.name}RepositoryImpl.${lang}"],
                        [input: "stage/crud/api/persistence/IEntityRepository.vm", output: "/api/src/main/${lang}/${packageBase}/api/persistence/core/${entity.name}RepositoryCustom.${lang}"],
                        [input: "stage/crud/api/service/service.vm", output: "/api/src/main/${lang}/${packageBase}/api/service/core/${entity.name}Service.${lang}"],
                        [input: "stage/crud/api/service/iservice.vm", output: "/api/src/main/${lang}/${packageBase}/api/service/I${entity.name}Service.${lang}"],
                        [input: "stage/crud/api/presentation/restController.vm", output: "/api/src/main/${lang}/${packageBase}/api/rest/${entity.name}Controller.${lang}"]
                ]
            }
        }
        for (def entity : entityList) {
            if (entity.looksLikeMainEntity() && useWorkflow) {
                "geracao de workflows" {
                    object entity
                    templates = [
                            [input: "stage/workflow/entity.bpmn20.xml.vm", output: "/api/src/main/resources/processes/${entity.name}.bpmn20.xml"]
                    ]
                }
            }
        }
        for (def entity : entityList) {
            if (entity.hasDeadline()) {
                "geracao de alerts" {
                    object entity
                    templates = [
                            [input: "stage/crud/scripts/AlertController.js.vm", output: "/front-end/app/scripts/controllers/support/${entity.name}AlertController.js"]
                    ]
                }

            }
        }

        "repository" {
            templates = [
                    [input: "stage/domain/${lang}/HistogramDto.vm", output: "/api/src/main/${lang}/${packageBase}/domain/dto/HistogramDto.${lang}"],
                    [input: "stage/crud/api/persistence/DashboardRepository.vm", output: "/api/src/main/${lang}/${packageBase}/api/persistence/mybatis/DashboardRepository.${lang}"],
                    [input: "stage/crud/api/persistence/DashboardRepository.xml.vm", output: "/api/src/main/resources/${packageBase}/api/persistence/mybatis/DashboardRepository.xml"]
            ]
        }
//        [input: "stage/workflow/SimpleProccessCommand.vm", output: "/api/src/main/${lang}/${packageBase}/api/service/support/SimpleProccessCommand.${lang}"],
//        [input: "stage/workflow/IWorkflowCommand.vm", output: "/api/src/main/${lang}/${packageBase}/api/service/support/IWorkflowCommand.${lang}"],
//        [input: "stage/workflow/ActivitiTransferObject.vm", output: "/api/src/main/${lang}/${packageBase}/api/service/support/ActivitiTransferObject.${lang}"],
        //[input: "stage/config/ActivitiConfiguration.vm", output: "/api/src/main/${lang}/${packageBase}/ActivitiConfiguration.${lang}"],
        "single-generateds" {
            templates = [

                    [input: "stage/frontend/app/modules/main/main.html.vm", output: "/front-end/app/modules/main/main.html"],

                    [input: "stage/frontend/app/index.html.vm", output: "/front-end/app/index.html"],
                    [input: "stage/frontend/app/layout/menu/menu.html.vm", output: "/front-end/app/layout/menu/menu.html"],
                    [input: "stage/frontend/app/app.module.js.vm", output: "/front-end/app/app.module.js"],

                    [input: "stage/frontend/app/i18n/", output: "/front-end/app/i18n"],

                    [input: "stage/config/ehcache.xml.vm", output: "/api/src/main/resources/ehcache.xml"],
                    [input: "stage/crud/api/presentation/DashboardController.vm", output: "/api/src/main/${lang}/${packageBase}/api/rest/reports/DashboardController.${lang}"],

                    [input: "stage/crud/scripts/DashboardService.js.vm", output: "/front-end/app/scripts/service/dashboards/DashboardService.js"],
                    [input: "stage/crud/scripts/DashboardController.js.vm", output: "/front-end/app/scripts/controllers/dashboards/DashboardController.js"],

                    [input: "stage/crud/scripts/ActivitiService.js.vm", output: "/front-end/app/scripts/service/support/ActivitiService.js"],
                    [input: "stage/crud/scripts/ActivitiController.js.vm", output: "/front-end/app/scripts/controllers/support/ActivitiController.js"],

                    [input: "stage/crud/html/dashboard.html.vm", output: "/front-end/app/views/dashboards/dashboard.html"],

                    [input: "stage/crud/html/deployment.html.vm", output: "/front-end/app/views/activiti/deployment.html"],

                    [input: "stage/crud/html/modals.html.vm", output: "/front-end/app/views/modals.html"]

            ]
        }

        for (def entity : entityList) {
            "geracao de front-end" {
                templates = [
                        [input: "stage/frontend/crud/modules/entity/entity.controller.js.vm", output: "/front-end/app/modules/${entity.beanName}/${entity.beanName}.controller.js"],
                        [input: "stage/frontend/crud/modules/entity/entity.modal.controller.js.vm", output: "/front-end/app/modules/${entity.beanName}/${entity.beanName}.modal.controller.js"],
                        [input: "stage/frontend/crud/modules/entity/entity.edit.controller.js.vm", output: "/front-end/app/modules/${entity.beanName}/${entity.beanName}.edit.controller.js"],
                        [input: "stage/frontend/crud/modules/entity/entity.edit.main.controller.js.vm", output: "/front-end/app/modules/${entity.beanName}/${entity.beanName}.edit.main.controller.js"],
                        [input: "stage/frontend/crud/modules/entity/entity.controllerExt.js.vm", output: "/front-end/app/modules/${entity.beanName}/${entity.beanName}.extController.js"],
                        [input: "stage/frontend/crud/modules/entity/entity.service.js.vm", output: "/front-end/app/modules/${entity.beanName}/${entity.beanName}.service.js"],
                        [input: "stage/frontend/crud/modules/entity/entity.module.js.vm", output: "/front-end/app/modules/${entity.beanName}/${entity.beanName}.module.js"],
                        [input: "stage/frontend/crud/modules/entity/entity.route.js.vm", output: "/front-end/app/modules/${entity.beanName}/${entity.beanName}.route.js"],
                        [input: "stage/frontend/crud/modules/entity/entity.html.vm", output: "/front-end/app/modules/${entity.beanName}/${entity.beanName}.html"],
                        [input: "stage/frontend/crud/modules/entity/entity.edit.html.vm", output: "/front-end/app/modules/${entity.beanName}/${entity.beanName}.edit.html"],
                        [input: "stage/frontend/crud/modules/entity/entity.edit.main.html.vm", output: "/front-end/app/modules/${entity.beanName}/${entity.beanName}.edit.main.html"],
                        [input: "stage/frontend/crud/modules/entity/entity.edit.main.html.vm", output: "/front-end/app/modules/${entity.beanName}/${entity.beanName}.edit.main.html"],

                        [input: "stage/frontend/crud/modules/entity/components/entity.fieldset.html.vm", output: "/front-end/app/modules/${entity.beanName}/components/${entity.beanName}.fieldset.html"],
                        [input: "stage/frontend/crud/modules/entity/components/entity.table.html.vm", output: "/front-end/app/modules/${entity.beanName}/components/${entity.beanName}.table.html"],
                        [input: "stage/frontend/crud/modules/entity/components/entity.filter.html.vm", output: "/front-end/app/modules/${entity.beanName}/components/${entity.beanName}.filter.html"],
                        [input: "stage/frontend/crud/modules/entity/components/entity.card.html.vm", output: "/front-end/app/modules/${entity.beanName}/components/${entity.beanName}.card.html"],
                        [input: "stage/frontend/crud/modules/entity/components/entity.readonly.fieldset.html.vm", output: "/front-end/app/modules/${entity.beanName}/components/${entity.beanName}.readonly.html"],
                        [input: "stage/frontend/crud/modules/entity/components/entity.modal.html.vm", output: "/front-end/app/modules/${entity.beanName}/components/${entity.beanName}.modal.html"],
                        [input: "stage/frontend/crud/modules/entity/components/entity.grid.cell.delete.html.vm", output: "/front-end/app/modules/${entity.beanName}/components/${entity.beanName}.grid.cell.delete.html"],
                        [input: "stage/frontend/crud/modules/entity/components/entity.grid.cell.detalhar.html.vm", output: "/front-end/app/modules/${entity.beanName}/components/${entity.beanName}.grid.cell.detalhar.html"],
                        [input: "stage/frontend/crud/modules/entity/components/entity.grid.cell.edit.html.vm", output: "/front-end/app/modules/${entity.beanName}/components/${entity.beanName}.grid.cell.edit.html"],

                        [input: "stage/frontend/crud/modules/entity/directives/select.directive.html.vm", output: "/front-end/app/modules/${entity.beanName}/directives/${entity.beanName}.select.directive.html"],
                        [input: "stage/frontend/crud/modules/entity/directives/select.directive.js.vm", output: "/front-end/app/modules/${entity.beanName}/directives/${entity.beanName}.select.directive.js"],
                        [input: "stage/frontend/crud/modules/entity/directives/fieldset.directive.js.vm", output: "/front-end/app/modules/${entity.beanName}/directives/${entity.beanName}.fieldset.directive.js"],
                        [input: "stage/frontend/crud/modules/entity/directives/fieldset.directive.html.vm", output: "/front-end/app/modules/${entity.beanName}/directives/${entity.beanName}.fieldset.directive.html"]
                ]
                object entity
            }
        }

        // for (def property : entity.getManyToOneProperties())
        for (def entity : entityList) {
            "geracao de front-end" {
                templates = [
                        [input: "stage/frontend/crud/modules/entity/detail/tomany.controller.js.vm",
                         output: "/front-end/app/modules/${entity.beanName}/details/${entity.beanName}.child.controller.js"],
                        [input: "stage/frontend/crud/modules/entity/detail/tomany.child.html.vm",
                         output: "/front-end/app/modules/${entity.beanName}/details/${entity.beanName}.child.html"],
                        [input: "stage/frontend/crud/modules/entity/detail/tomany.compound.html.vm",
                         output: "/front-end/app/modules/${entity.beanName}/details/${entity.beanName}.compound.html"]
                ]
                object entity
            }

        }

//        for (def entity : entityList) {
//            "tests" {
//                object entity
//                templates = [
//                        [input: "stage/crud/test/SerializationTest.vm", output: "/api/src/test/${lang}/${packageBase}/domain/SerializationTest.${lang}"],
//
//                        [input: "stage/crud/test/integrationTest.vm", output: "/api/src/test/${lang}/${packageBase}/api/service/${entity.name}IntegrationTest.${lang}"],
//                        [input: "stage/crud/test/dml-entity.sql.vm", output: "/api/src/test/resources/${packageBase}/api/service/dml-${entity.name}.sql.vm"],
//
//                        [input: "stage/crud/test/AcceptanceSuiteTest.vm", output: "/api/src/test/${lang}/specs/${entity.name.toLowerCase()}/${entity.name}AcceptanceSuiteTest.${lang}"],
//                        [input: "stage/crud/test/AcceptanceSuite.html.vm", output: "/api/src/test/resources/specs/${entity.name.toLowerCase()}/${entity.name}AcceptanceSuite.html"],
//
//                        [input: "stage/crud/test/CreateWithRequiredAcceptanceCriteria.vm", output: "/api/src/test/${lang}/specs/${entity.name.toLowerCase()}/Create${entity.name}WithRequiredAcceptanceCriteria.${lang}"],
//                        [input: "stage/crud/test/UpdateWithRequiredAcceptanceCriteria.vm", output: "/api/src/test/${lang}/specs/${entity.name.toLowerCase()}/Update${entity.name}WithRequiredAcceptanceCriteria.${lang}"],
//                        [input: "stage/crud/test/DeleteWithRequiredAcceptanceCriteria.vm", output: "/api/src/test/${lang}/specs/${entity.name.toLowerCase()}/Delete${entity.name}WithRequiredAcceptanceCriteria.${lang}"],
//                        [input: "stage/crud/test/FindOneAcceptanceCriteria.vm", output: "/api/src/test/${lang}/specs/${entity.name.toLowerCase()}/FindOne${entity.name}AcceptanceCriteria.${lang}"],
//                        [input: "stage/crud/test/FindAllAcceptanceCriteria.vm", output: "/api/src/test/${lang}/specs/${entity.name.toLowerCase()}/FindAll${entity.name}AcceptanceCriteria.${lang}"],
//
//                        [input: "stage/crud/test/CreateWithRequiredAcceptanceCriteria.html.vm", output: "/api/src/test/resources/specs/${entity.name.toLowerCase()}/Create${entity.name}WithRequiredAcceptanceCriteria.html"],
//                        [input: "stage/crud/test/UpdateWithRequiredAcceptanceCriteria.html.vm", output: "/api/src/test/resources/specs/${entity.name.toLowerCase()}/Update${entity.name}WithRequiredAcceptanceCriteria.html"],
//                        [input: "stage/crud/test/DeleteWithRequiredAcceptanceCriteria.html.vm", output: "/api/src/test/resources/specs/${entity.name.toLowerCase()}/Delete${entity.name}WithRequiredAcceptanceCriteria.html"],
//                        [input: "stage/crud/test/FindOneAcceptanceCriteria.html.vm", output: "/api/src/test/resources/specs/${entity.name.toLowerCase()}/FindOne${entity.name}AcceptanceCriteria.html"],
//                        [input: "stage/crud/test/FindAllAcceptanceCriteria.html.vm", output: "/api/src/test/resources/specs/${entity.name.toLowerCase()}/FindAll${entity.name}AcceptanceCriteria.html"]
//                ]
//            }
//        }
    }
}
