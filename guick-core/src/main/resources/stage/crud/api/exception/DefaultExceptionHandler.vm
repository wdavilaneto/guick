/**
 *  Guick Generate class: https://github.com/wdavilaneto/guick
 *  Author: service-wdavilaneto@redhat.com
 *  This source is free under The Apache Software License, Version 2.0
 *  license url http://www.apache.org/licenses/LICENSE-2.0.txt
 */
package ${project.group}.commons.exception;

import ${project.group}.commons.exception.BusinessException;
import ${project.group}.commons.rest.dto.RestFieldMessageDTO;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.MessageSource;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.validation.Errors;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

@ControllerAdvice
public class DefaultExceptionHandler {

    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultExceptionHandler.class);

    private static final String ERROR = "error";
    private static final String CAUSE = "cause";
    private static final String VIOLATIONS = "violations";
    private static final String SUPPORTED = "supported";
    private static final String VALUE = "value";
    private static final String TYPE = "type";
    private static final String MESSAGE = "message";
    private static final String TICKET = "ticket";
    private static final String VALIDATION_FAILURE = "ValidationFailure";
    private static final String REQUEST_ERROR = "RequestError";
    private static final String DATA_INTEGRITY_ERROR = "DataIntegrityError";
    private static final String DATA_ERROR = "DataError";
    private static final String UNSUPPORTED_MEDIA_TYPE = "UnsupportedMediaType";
    private static final String UNKNOWN_ERROR = "UnknownError";

    @Resource
    private MessageSource messageSource;

    @ExceptionHandler(MethodArgumentNotValidException.class)
    @ResponseStatus(value = HttpStatus.BAD_REQUEST)
    @ResponseBody
    public Map<String, Object> handleValidationException(MethodArgumentNotValidException ex) {
        LOGGER.error("ExceptionBarrier Message " , ex );
        Map<String, Object> map = new HashMap<>();
        map.put(ERROR, resolveMessage(VALIDATION_FAILURE, null));
        map.put(VIOLATIONS, convertErrorInFieldMessage(ex.getBindingResult()));

        return map;
    }

    @ExceptionHandler(BusinessException.class)
    @ResponseStatus(value = HttpStatus.CONFLICT)
    @ResponseBody
    public Map<String, Object> handleBusinessException(BusinessException ex) {
        LOGGER.error("ExceptionBarrier Message " , ex );
        Map<String, Object> map = new HashMap<>();
        map.put(ERROR, resolveMessage(VALIDATION_FAILURE, ex.getMessageParams()));
        List<String> violations = new ArrayList<>();
        violations.add(resolveMessage(ex.getMessage(), ex.getMessageParams()));
        map.put(VIOLATIONS, violations);

        return map;
    }

    /**
     * Para permissoes negadas nos services
     *
     * @param ex
     * @return
     * @throws IOException
     */
    @ExceptionHandler(AccessDeniedException.class)
    @ResponseStatus(value = HttpStatus.FORBIDDEN)
    public
    @ResponseBody
    void handleAccessDeniedException(AccessDeniedException ex) throws IOException {
//
    }

    @ExceptionHandler(Exception.class)
    @ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)
    @ResponseBody
    public Map<String, Object> handleUncaughtException(Exception ex) {
        LOGGER.error("ExceptionBarrier Message " , ex );
        Map<String, Object> map = new HashMap<>();
        String resolveMessage = resolveMessage(UNKNOWN_ERROR, null);
        map.put(ERROR, resolveMessage);
        long timeInMillis = Calendar.getInstance().getTimeInMillis();
        map.put(TICKET, timeInMillis);

        LOGGER.error(resolveMessage + "[Ticket: " + timeInMillis + "]", ex);
        return map;
    }

    private List<RestFieldMessageDTO> convertErrorInFieldMessage(Errors errors) {
        List<RestFieldMessageDTO> result = new ArrayList<>();
        for (FieldError fieldError : errors.getFieldErrors()) {
            result.add(new RestFieldMessageDTO(fieldError.getField(), resolveMessage(fieldError), fieldError.getRejectedValue()));
        }
        return result;
    }

    private String resolveMessage(String code, Object[] args) {
        return messageSource.getMessage(code, args, new Locale("pt", "BR"));// Locale.getDefault());
    }

    private String resolveMessage(FieldError fieldError) {
        return messageSource.getMessage(fieldError, new Locale("pt", "BR"));// Locale.getDefault());
    }
}