#set( $open  = "${")
#set( $close = "}")
#set( $entityBeanName = ${util.uncapitalize($entity.name)} )
/**
 *  Guick Generate class: https://github.com/wdavilaneto/guick
 *  Author: service-wdavilaneto@redhat.com
 *  This source is free under The Apache Software License, Version 2.0
 *  license url http://www.apache.org/licenses/LICENSE-2.0.txt
 */
package ${project.group}.${project.name}.api.service;

import java.math.BigDecimal;
import java.util.Date;
import ${project.group}.${project.name}.domain.${entity.name};
#if(!$entity.isEmbeddable() and !$entity.getParent() && ${entity.id.type} != 'Long' && ${entity.id.type} != 'String' && ${entity.id.type} != 'Date' && ${entity.id.type} != 'BigDecimal')
import ${project.group}.${project.name}.domain.${entity.id.type};
#end
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.annotation.Resource;

/**
 *  CRUD Rest Json 'Controller' for entity${entity.name}
 *  Guick Generate class:
 *  https://github.com/wdavilaneto/guick
 *  Author: service-wdavilaneto@redhat.com
 */
@Service
public interface I${entity.name}Service {

    /**
     * Returns an full, but Paged, list of all entities (${entity.name})
     * @param pageable
     * @return
     */
#if( ${entity.looksLikeEnum()} || ${entity.looksLikeDomain()} || ( ${entityBeanName} == 'endereco' || ${entityBeanName} == 'orgao' ||  ${entityBeanName} == 'cargo' ))
    @Cacheable(value = "${entityBeanName}List")
#end
    public Page<${entity.name}> findAll(Pageable pageable);

    /**
    *
    * @param $entityBeanName
    * @param pageable
    * @return
    */
#if( ${entity.looksLikeEnum()} || ${entity.looksLikeDomain()} || ( ${entityBeanName} == 'endereco' || ${entityBeanName} == 'orgao' ||  ${entityBeanName} == 'cargo' ))
    @Cacheable(value = "${entityBeanName}List")
#end
    public Page<${entity.name}> search(${entity.name} $entityBeanName , Pageable pageable);

    /**
    *
    * @param text
    * @param pageable
    * @return
    */
#if( ${entity.looksLikeEnum()} || ${entity.looksLikeDomain()} || ( ${entityBeanName} == 'endereco' || ${entityBeanName} == 'orgao' ||  ${entityBeanName} == 'cargo' ))
    @Cacheable(value = "${entityBeanName}List")
#end
    public Page<${entity.name}> searchText(String text , Pageable pageable);

    /**
     * Return an entity,${entity.name} ,with an Given ID
     * @param id
     * @return
     */
    public ${entity.name} getOne(${entity.id.type} id);

    /**
     * Deletes an entity with an given ID
     * @param id
     * @return
     */
#if( ${entity.looksLikeEnum()} || ${entity.looksLikeDomain()} || ( ${entityBeanName} == 'endereco' || ${entityBeanName} == 'orgao' ||  ${entityBeanName} == 'cargo' ))
    @CacheEvict(value="${entityBeanName}List", allEntries=true)
#end
    public void delete(${entity.id.type} id);

    /**
     * Simple save or update an entity
     * @param ${entityBeanName}
     * @return
     */
#if( ${entity.looksLikeEnum()} || ${entity.looksLikeDomain()} || ( ${entityBeanName} == 'endereco' || ${entityBeanName} == 'orgao' ||  ${entityBeanName} == 'cargo' ))
    @CacheEvict(value="${entityBeanName}List", allEntries=true)
#end
    public ${entity.name} save(${entity.name} ${entityBeanName});

#if (${entity.hasDeadline()})
    public Page<${entity.name}> overdue(Pageable pageable);
#end
}
