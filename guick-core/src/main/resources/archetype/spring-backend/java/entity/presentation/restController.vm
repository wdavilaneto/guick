#set( $open  = "${")
#set( $close = "}")
#set( $entityBeanName = ${util.uncapitalize($entity.name)} )
/**
 *  Guick Generate class: https://github.com/wdavilaneto/guick
 *  Author: service-wdavilaneto@redhat.com
 *  This source is free under The Apache Software License, Version 2.0
 *  license url http://www.apache.org/licenses/LICENSE-2.0.txt
 */
package ${project.group}.${project.name}.api.rest;

import java.math.BigDecimal;
import java.util.Date;
import ${project.group}.commons.rest.dto.Pagination;
import ${project.group}.commons.rest.dto.SearchFilter;
import ${project.group}.${project.name}.domain.${entity.name};
#if(!$entity.isEmbeddable() and !$entity.getParent() && ${entity.id.type} != 'Long' && ${entity.id.type} != 'String' && ${entity.id.type} != 'Date' && ${entity.id.type} != 'BigDecimal')
import ${project.group}.${project.name}.domain.${entity.id.type};
#end
import ${project.group}.${project.name}.api.service.I${entity.name}Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import javax.validation.Valid;

import static org.springframework.http.HttpStatus.NOT_FOUND;
import static org.springframework.http.HttpStatus.OK;
import static org.springframework.web.bind.annotation.RequestMethod.DELETE;
import static org.springframework.web.bind.annotation.RequestMethod.GET;
import static org.springframework.web.bind.annotation.RequestMethod.POST;
import static org.springframework.web.bind.annotation.RequestMethod.PUT;

/**
 *  CRUD Rest Json 'Controller' for entity${entity.name}
 *  Guick Generate class:
 *  https://github.com/wdavilaneto/guick
 *  Author: service-wdavilaneto@redhat.com
 */
@RestController
@RequestMapping(value="/${entityBeanName}")
public class ${entity.name}Controller {

    private static PageRequest DEFAULT_PAGE = new PageRequest(0,20);
    private static final Logger LOGGER = LoggerFactory.getLogger(${entity.name}Controller.class);

    @Resource(name = "${entityBeanName}Service")
    private I${entity.name}Service ${entityBeanName}Service;

    /**
     * Returns an full, but Paged, list of all entities (${entity.name})
     * @param pagination
     * @return
     */
    @RequestMapping(method = GET)
#if ( ${project.config.generationLanguage} == 'java')
    public HttpEntity<Page<${entity.name}>> findAll(Pagination pagination) {
#else
    def findAll(Pagination pagination) {
#end
        return new ResponseEntity(${entityBeanName}Service.findAll(pagination.getPageable()), OK);
    }

    /**
     * Returns a paged and filtered list with an given example (ignoring relationship examples beyond id)
     * @param filter
     * @return
     */
    @RequestMapping(value = "/search", method = POST)
#if ( ${project.config.generationLanguage} == 'java')
    public HttpEntity<Page<${entity.name}>> search(@RequestBody SearchFilter<${entity.name}> filter) {
#else
    def search(@RequestBody SearchFilter<${entity.name}> filter) {
#end
        return new ResponseEntity(${entityBeanName}Service.search(filter.getContent() , filter.getPageable()), OK);
    }

    /**
     * Request first page of a text based search on all fields ignoring associations
     * @param text
     * @return
     */
    @RequestMapping(value = "/searchText", method = GET)
#if ( ${project.config.generationLanguage} == 'java')
    public HttpEntity<Page<${entity.name}>> searchTextGet(String text) {
#else
    def searchTextGet(String text) {
#end
        return new ResponseEntity(${entityBeanName}Service.searchText(text , DEFAULT_PAGE ), OK);
    }
    /**
     * Returns a paged and filtered list with an given example (ignoring relationship examples beyond id)
     * @param filter
     * @return
     */
    @RequestMapping(value = "/searchText", method = RequestMethod.POST)
#if ( ${project.config.generationLanguage} == 'java')
    public HttpEntity<Page<${entity.name}>> searchText(@RequestBody SearchFilter<String> filter) {
#else
    def searchText(@RequestBody SearchFilter<String> filter) {
#end
        return new ResponseEntity(${entityBeanName}Service.searchText(filter.getContent() , filter.getPageable()), OK);
    }
    /**
     * Return an entity,${entity.name} ,with an Given ID
     * @param id
     * @return
     */
    @RequestMapping(value = "/{id}", method = GET)
#if ( ${project.config.generationLanguage} == 'java')
    public HttpEntity<${entity.name}> get(@PathVariable ${entity.id.type} id) {
#else
    def get(@PathVariable ${entity.id.type} id) {
#end
        return new ResponseEntity(${entityBeanName}Service.findOne(id), OK);
    }

    /**
     * Deletes an entity with an given ID
     * @param id
     * @return
     */
    @RequestMapping(value = "/{id}", method = DELETE)
#if ( ${project.config.generationLanguage} == 'java')
    public HttpEntity delete(@PathVariable ${entity.id.type} id) {
#else
    def delete(@PathVariable ${entity.id.type} id) {
#end
        ${entityBeanName}Service.delete(id);
        return new HttpEntity(null);
    }

    /**
     * Simple save or update an entity
     * @param ${entityBeanName}
     * @return
     */
    @RequestMapping(method = POST)
#if ( ${project.config.generationLanguage} == 'java')
    public HttpEntity<${entity.name}> save(@RequestBody ${entity.name} ${entityBeanName}) {
#else
    def save(@RequestBody ${entity.name} ${entityBeanName}) {
#end
        ${entityBeanName}Service.save(${entityBeanName});
        return new ResponseEntity(${entityBeanName}, OK);
    }
#if (${entity.hasDeadline()})

    /**
     * Returns an full, but Paged, list of all entities (${entity.name})
     * @param pagination
     * @return
     */
    @RequestMapping(value = "/overdue", method = GET)
#if ( ${project.config.generationLanguage} == 'java')
    public HttpEntity<${entity.name}> overdue(Pagination pagination) {
#else
    def overdue(Pagination pagination) {
#end
    }
        return new ResponseEntity(${entityBeanName}Service.overdue(pagination.getPageable()), OK);
    }
#end

}
