#set( $open  = "${")
#set( $close = "}")
#set( $entityBeanName = ${util.uncapitalize($entity.name)} )
/**
 *  Guick Generate class: https://github.com/wdavilaneto/guick
 *  Author: service-wdavilaneto@redhat.com
 *  This source is free under The Apache Software License, Version 2.0
 *  license url http://www.apache.org/licenses/LICENSE-2.0.txt
 */
package ${project.group}.${project.name}.api.service.core;

import java.math.BigDecimal;
import java.util.Date;
import ${project.group}.${project.name}.domain.${entity.name};
##if(!$entity.isEmbeddable() and !$entity.getParent() && ${entity.id.type} != 'Long' && ${entity.id.type} != 'String' && ${entity.id.type} != 'Date' && ${entity.id.type} != 'BigDecimal')
##import ${project.group}.${project.name}.domain.${entity.id.type};
##end
import ${project.group}.${project.name}.domain.*;
import ${project.group}.${project.name}.api.persistence.${entity.name}Repository;
import ${project.group}.${project.name}.api.service.I${entity.name}Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;

/**
 *  CRUD Rest Json 'Controller' for entity${entity.name}
 *  Guick Generate class:
 *  https://github.com/wdavilaneto/guick
 *  Author: service-wdavilaneto@redhat.com
 */
@Service
class ${entity.name}Service implements I${entity.name}Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(${entity.name}Service.class);

    @Resource(name = "${entityBeanName}Repository")
    private ${entity.name}Repository ${entityBeanName}Repository;

    @Override
    @Transactional(readOnly = true)
    public Page<${entity.name}> findAll(Pageable pageable) {
        return ${entityBeanName}Repository.findAll(pageable);
    }

    @Override
    @Transactional(readOnly = true)
    public Page<${entity.name}> search(${entity.name} $entityBeanName , Pageable pageable) {
        return ${entityBeanName}Repository.search($entityBeanName, pageable);
    }

    @Override
    @Transactional(readOnly = true)
    public Page<${entity.name}> searchText(String text , Pageable pageable) {
        return ${entityBeanName}Repository.searchText(text, pageable);
    }

    @Override
    @Transactional(readOnly = true)
    public ${entity.name} findOne(${entity.id.type} id) {
        return ${entityBeanName}Repository.findOne(id);
    }

    @Override
    @Transactional
    public void delete(${entity.id.type} id) {
        ${entityBeanName}Repository.delete(id);
    }

    @Override
    @Transactional
    public ${entity.name} save(${entity.name} ${entityBeanName}) {
        if (${entityBeanName}.getId() != null){
            return ${entityBeanName}Repository.update(${entityBeanName});
        }
        return ${entityBeanName}Repository.create(${entityBeanName});
    }

#if (${entity.hasDeadline()})
    @Override
    @Transactional(readOnly = true)
    public Page<${entity.name}> overdue(Pageable pageable) {
        return ${entityBeanName}Repository.overdue(pageable);
    }
#end

}
