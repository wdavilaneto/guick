/**
 *  Guick Generate class: https://github.com/wdavilaneto/guick
 *  Author: service-wdavilaneto@redhat.com
 *  This source is free under The Apache Software License, Version 2.0
 *  license url http://www.apache.org/licenses/LICENSE-2.0.txt
 */
## #if(${entity.looksLikeMainEntitiy())
## package ${project.group}.${project.name}.entity;
## #end
## #if( ${entity.looksLikeDomain()} )
## package ${project.group}.${project.name}.domain;
## #end
## #if(${entity.looksLikeEnum()})
## package ${project.group}.${project.name}.enums;
## #end
package ${project.group}.${project.name}.domain;

#foreach( ${property} in ${entity.getEnums()})
import  ${project.group}.${project.name}.domain.${property.getName()};
#end
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.*;

import javax.validation.constraints.*;

import ${project.group}.commons.json.JsonDateDeserializer;
import ${project.group}.commons.json.JsonDateSerializer;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.voodoodyne.jackson.jsog.JSOGGenerator;
##import lombok.AllArgsConstructor;
##import lombok.Getter;
##import lombok.NoArgsConstructor;
##import lombok.Setter;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.hibernate.annotations.*;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import org.springframework.format.annotation.DateTimeFormat;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;


/**
 * ${entity.getName()} Filter
 * A classe ${entity.getName()} representa o mapeamento Objeto-Relacional
 * da entidade de negocio armazenada na tabela ${entity.getTable().getName()}.
 *${entity.table.comment}
 */
@JsonIdentityInfo(generator=JSOGGenerator.class)
@JsonIgnoreProperties(ignoreUnknown = true)
public class ${entity.getName()}Filter extends ${entity.getName()} implements Serializable {


    /**
     * {@inheritDoc}
     */
    @Override
    public int hashCode() {
        return new HashCodeBuilder()
#if(!$entity.isEmbeddable() and !$entity.getParent() )
                .append(id)
#end
#foreach( ${property} in ${entity.parent.properties})
                .append(${property.name})
#end
#foreach( ${property} in ${entity.id.getProperties()})
                .append(id.${property.name})
#end
#foreach( ${property} in ${entity.properties})
#if ( !${strangeKey}  || ${property.column} != ${strangeKey} )
                .append(${property.name})
#end
#end
#foreach( ${property} in ${entity.getManyToOneProperties()})
                .append(${property.name})
#end
#foreach( ${property} in ${entity.parent.getManyToOneProperties()})
                .append(get${property.capitalizedName}())
#end
#foreach( ${property} in ${entity.id.getManyToOneProperties()})
                .append(id.get${property.capitalizedName}())
#end
               .toHashCode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean equals(Object obj) {
        if (obj == null) { return false; }
        if (obj == this) { return true; }
        if (obj.getClass() != getClass()) {
            return false;
        }

#if ( !${entity.properties.empty})
        ${entity.getName()} rhs = (${entity.getName()}) obj;

#if(!$entity.isEmbeddable() and !$entity.getParent() )
        // For performance reasons we first eliminate @id (primary key) difference
        if (id != null && (!id.equals(rhs.id)) ) {
            return false;
        }
#end
        // so lets check all properties
        return new EqualsBuilder()
#foreach( ${property} in ${entity.properties})
#if ( !${strangeKey}  || ${property.column} != ${strangeKey} )
                .append(${property.name}, rhs.${property.name})
#end
#end
#foreach( ${property} in ${entity.parent.properties})
                .append(${property.name}, rhs.${property.name})
#end
#foreach( ${property} in ${entity.id.properties})
#set( $name = $util.capitalize( ${property.name} ))
                .append(id.get${name}(), rhs.id.get${name}())
#end
#foreach( ${property} in ${entity.getManyToOneProperties()})
                .append(${property.name}, rhs.${property.name})
#end
#foreach( ${property} in ${entity.parent.getManyToOneProperties()})
                .append(get${property.capitalizedName}(), rhs.get${property.capitalizedName}())
#end
#foreach( ${property} in ${entity.id.getManyToOneProperties()})
                .append(id.get${property.capitalizedName}(), rhs.getId().get${property.capitalizedName}())
#end
                .isEquals();
#else
        return true;
#end

    }

}
