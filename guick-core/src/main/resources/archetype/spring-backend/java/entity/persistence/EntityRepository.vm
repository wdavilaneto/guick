#set( $entityBeanName = ${util.uncapitalize($entity.name)} )
/**
 *  Guick Generate class: https://github.com/wdavilaneto/guick
 *  Author: service-wdavilaneto@redhat.com
 *  This source is free under The Apache Software License, Version 2.0
 *  license url http://www.apache.org/licenses/LICENSE-2.0.txt
 */
package ${project.group}.${project.name}.api.persistence.core;

import java.math.BigDecimal;
import ${project.group}.commons.persistence.PageableHelper;
import ${project.group}.${project.name}.domain.${entity.name};
#if(!$entity.isEmbeddable() and !$entity.getParent() && ${entity.id.type} != 'Long' && ${entity.id.type} != 'String' && ${entity.id.type} != 'Date' && ${entity.id.type} != 'BigDecimal')
import ${project.group}.${project.name}.domain.${entity.id.type};
#end
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import javax.persistence.EntityManager;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

public class ${entity.name}RepositoryImpl implements ${entity.name}RepositoryCustom {

    @Autowired
    private EntityManager entityManager;

    /**
     * Returns an full, but Paged, list of all entities (${entity.name})
     * @param pageable
     * @return
     */
    public Page<${entity.name}> findAll(Pageable pageable){
        if (pageable == null) {
            pageable = PageableHelper.deafultPageable();
        }
        Session session = (Session) entityManager.getDelegate();
        Criteria criteria = session.createCriteria(${entity.getName()}.class);
#if( ${entity.getMostDescritiveProperties().size()} > 0 )
        criteria.addOrder(Order.asc("${entity.getMostDescritiveProperties()[0]}"));
#end
        return (Page<${entity.name}>) PageableHelper.getPage(criteria, pageable);
    }

    @Override
    public Page<${entity.name}> search(${entity.name} $entityBeanName, Pageable pageable) {
        if (pageable == null) {
            pageable = new PageRequest(0, 10);
        }
        Session session = (Session) entityManager.getDelegate();
        Criteria criteria = session.createCriteria(${entity.getName()}.class);

        // Prepare Example
        Example example = Example.create(${entityBeanName});
        criteria.add(example.enableLike(MatchMode.ANYWHERE).ignoreCase());

#foreach( ${property} in ${entity.id.getProperties()})
#set($propertyCaptalized = $util.capitalize(${property.getName()}))
#if( $property.type == 'String' )
        if (${entityBeanName}.getId() != null && ${entityBeanName}.getId().get${propertyCaptalized}() != null && ${entityBeanName}.getId().get${propertyCaptalized}().trim().length() > 0) {
            criteria.add(
                Restrictions.ilike("id.${property.name}", ${entityBeanName}.getId().get${propertyCaptalized}(), MatchMode.ANYWHERE)
            );
        }

#else
        if (${entityBeanName}.getId() != null && ${entityBeanName}.getId().get${propertyCaptalized}() != null) {
             criteria.add(Restrictions.eq("id.${property.getName()}", ${entityBeanName}.getId().get${propertyCaptalized}()));
        }

#end
#end
#foreach( ${property} in ${entity.id.getManyToOneProperties()})
#set($propertyCaptalized = $util.capitalize(${property.getName()}))
#if( $property.type == 'String' )
        if (${entityBeanName}.getId()!= null && ${entityBeanName}.getId().get${propertyCaptalized}() != null && ${entityBeanName}.getId().get${propertyCaptalized}().trim().length() > 0) {
            criteria.add(
                Restrictions.ilike("id.${property.name}.id", ${entityBeanName}.getId().get${propertyCaptalized}().getId(), MatchMode.ANYWHERE)
            );
        }

#else
        if (${entityBeanName}.getId()!= null && ${entityBeanName}.getId().get${propertyCaptalized}() != null) {
             criteria.add(Restrictions.eq("id.${property.getName()}.id", ${entityBeanName}.getId().get${propertyCaptalized}().getId()));
        }

#end
#end
#foreach( ${property} in ${entity.getManyToOneProperties()})
#set($propertyCaptalized = $util.capitalize(${property.getName()}))
        if (${entityBeanName}.get${propertyCaptalized}() != null && ${entityBeanName}.get${propertyCaptalized}().getId() != null) {
            criteria.add(Restrictions.eq("${property.getName()}.id", ${entityBeanName}.get${propertyCaptalized}().getId()));
        }

#end
#foreach( ${property} in ${entity.getEnums()})
#set($propertyCaptalized = $util.capitalize(${property.getSimpleProperty().getName()}))
        if (${entityBeanName}.get${propertyCaptalized}() != null ) {
            criteria.add(Restrictions.eq("${property.getSimpleProperty().getName()}", ${entityBeanName}.get${propertyCaptalized}()));
        }

#end
#foreach( ${property} in ${entity.parent.getEnums()})
#set($propertyCaptalized = $util.capitalize(${property.getSimpleProperty().getName()}))
        if (${entityBeanName}.get${propertyCaptalized}() != null ) {
            criteria.add(Restrictions.eq("${property.getSimpleProperty().getName()}", ${entityBeanName}.get${propertyCaptalized}()));
        }

#end
#foreach( ${property} in ${entity.id.getEnums()})
#set($propertyCaptalized = $util.capitalize( ${property.getSimpleProperty().getName()} ))
        if (${entityBeanName}.getId().get${propertyCaptalized}() != null ) {
            criteria.add(Restrictions.eq("id.${property.getSimpleProperty().getName()}", ${entityBeanName}.getId().get${propertyCaptalized}()));
        }

#end
#if( ${entity.getMostDescritiveProperties().size()} > 0 )
        criteria.addOrder(Order.asc("${entity.getMostDescritiveProperties()[0]}"));
#end
        return (Page<${entity.name}>) PageableHelper.getPage(criteria, pageable);
    }

    @Override
    public Page<${entity.name}> searchText(String text, Pageable pageable) {
        if (pageable == null) {
            pageable = PageableHelper.deafultPageable();
        }
        Session session = (Session) entityManager.getDelegate();
        Criteria criteria = session.createCriteria(${entity.getName()}.class);
        criteria.add( Restrictions.disjunction()
#foreach( ${property} in ${entity.getDistinctedProperties()})
#if( $property.type == 'String' )
            .add(Restrictions.ilike("${property.getName()}", text, MatchMode.ANYWHERE))
#end
#end
#foreach( ${property} in ${entity.id.getProperties()})
#if( $property.type == 'String' )
            .add(Restrictions.ilike("id.${property.name}", text, MatchMode.ANYWHERE))
#end
#end
#foreach( ${property} in ${entity.id.getManyToOneProperties()})
#if( $property.type == 'String' )
            .add(Restrictions.ilike("id.${property.name}.id", text, MatchMode.ANYWHERE))
#end
#end
        );
#if( ${entity.getMostDescritiveProperties().size()} > 0 )
        criteria.addOrder(Order.asc("${entity.getMostDescritiveProperties()[0]}"));
#end
        return (Page<${entity.name}>) PageableHelper.getPage(criteria, pageable);
    }

#if(!$entity.isEmbeddable() and !$entity.getParent() )
    @Override
    public ${entity.name} get(${entity.id.type} id) {
        return entityManager.find(${entity.name}.class, id);
    }
#else
    @Override
    public ${entity.name} get(${entity.name} e) {
        return entityManager.find(${entity.name}.class, e);
    }
#end
##if( $entity.childrens.size() > 0 )
    @Override
    public  ${entity.name} update( ${entity.name} ${entityBeanName}){
        Session session = (Session) entityManager.getDelegate();
        session.update(${entityBeanName});
        return ${entityBeanName};
    }
    @Override
    public  ${entity.name} create( ${entity.name} ${entityBeanName}) {
        Session session = (Session) entityManager.getDelegate();
        session.persist(${entityBeanName});
        return ${entityBeanName};
    }
##end
#if (${entity.hasDeadline()})

    public Page<${entity.name}> overdue(Pageable pageable){
        if (pageable == null) {
            pageable = PageableHelper.deafultPageable();
        }
        Date today = new Date();
        Session session = (Session) entityManager.getDelegate();
        Criteria criteria = session.createCriteria(${entity.getName()}.class);
        criteria.add( Restrictions.le("${entity.getAllDeadlineProperties()[0]}", today ) );
        criteria.addOrder(Order.asc("${entity.getAllDeadlineProperties()[0]}"));
        return (Page<${entity.name}>) PageableHelper.getPage(criteria, pageable);
    }
#end

}
