def packageBase = project.packageBase
def lang = project.config.generationLanguage
def orgName = project.lastGroup
def acronym = project.acronym
def stage = "archetype/spring-backend"

guick {

    project {

        "root" {
            templates = [
                    [input: "${stage}/LICENSE.txt", output: "/LICENSE.txt"],
                    [input: "${stage}/Readme.md", output: "/Readme.md"],
                    [input: "${stage}/.gitignore", output: "/api/.gitignore"],
                    [input: "${stage}/.gitignore", output: "/.gitignore"],
                    [input: "${stage}/mvnw.cmd", output: "/mvnw.cmd"],
                    [input: "${stage}/mvnw", output: "/mvnw"]
            ]
        }
//        [input: "${stage}/config/build-root.gradle.vm", output: "/build.gradle"],
//        [input: "${stage}/config/settings.gradle.vm", output: "/settings.gradle"],
//        [input: "${stage}/config/build.gradle.vm", output: "/api/build.gradle"]
        "build" {
            templates = [
                    [input: "${stage}/pom-parent.xml.vm", output: "/pom.xml"],
                    [input: "${stage}/pom.xml.vm", output: "/api/pom.xml"],
            ]
        }
        "resources" {
            templates = [
                    [input: "${stage}/api/", output: "/api/"]
            ]
        }
        //[input: "crud/AbstractTest.groovy.vm", output: "/api/src/test/groovy/${packageBase}/"]
        "single-generateds" {
            templates = [
                    [input: "${stage}/java/Application.vm", output: "/api/src/main/${lang}/${packageBase}/Application.${lang}"],
                    [input: "${stage}/java/ApplicationWeb.vm", output: "/api/src/main/${lang}/${packageBase}/ApplicationWeb.${lang}"],
                    [input: "${stage}/java/commons", output: "/api/src/main/${lang}/${packageBase}/../commons/"],
            ]
        }
    }
}

