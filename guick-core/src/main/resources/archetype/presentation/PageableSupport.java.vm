/**
 *  Guick Generate class: https://github.com/wdavilaneto/guick
 *  Author: service-wdavilaneto@redhat.com
 *  This source is free under The Apache Software License, Version 2.0
 *  license url http://www.apache.org/licenses/LICENSE-2.0.txt
 */
package ${project.group}.${project.name}.presentation.support;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

/**
 * DtoSupport for simple Pagination with some direct pages access
 */
@Component
public class PageableSupport {

    public static final int MAX_PAGE_ITEM_DISPLAY = 5;

    public List<PageItem> getPageList(Page page) {
        final int currentNumber = page.getNumber() + 1;

        List<PageItem> items = new ArrayList<PageItem>();

        int start;
        int size;
        if (page.getTotalPages() <= MAX_PAGE_ITEM_DISPLAY) {
            start = 1;
            size = page.getTotalPages();
        } else {
            if (currentNumber <= MAX_PAGE_ITEM_DISPLAY - MAX_PAGE_ITEM_DISPLAY / 2) {
                start = 1;
                size = MAX_PAGE_ITEM_DISPLAY;
            } else if (currentNumber >= page.getTotalPages() - MAX_PAGE_ITEM_DISPLAY / 2) {
                start = page.getTotalPages() - MAX_PAGE_ITEM_DISPLAY + 1;
                size = MAX_PAGE_ITEM_DISPLAY;
            } else {
                start = currentNumber - MAX_PAGE_ITEM_DISPLAY / 2;
                size = MAX_PAGE_ITEM_DISPLAY;
            }

        }


        for (int i = 0; i < size; i++) {
            ((ArrayList<PageItem>) items).add(new PageItem(start + i, (start + i) == currentNumber));
        }

        return items;
    }
}
